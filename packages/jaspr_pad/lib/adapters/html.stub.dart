// GENERATED FILE, DO NOT MODIFY
// Generated with jaspr_web_builder
// ignore_for_file: annotate_overrides, non_constant_identifier_names, unused_element, avoid_renaming_method_parameters

import 'dart:collection';
import 'dart:math';

class History {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  void back() => throw UnimplementedError('back');
  void forward() => throw UnimplementedError('forward');
  void go([int? delta]) => throw UnimplementedError('go');
  void pushState(dynamic data, String title, String? url) => throw UnimplementedError('pushState');
  void replaceState(dynamic data, String title, String? url) => throw UnimplementedError('replaceState');
  static bool get supportsState => throw UnimplementedError('supportsState');
  int get length => throw UnimplementedError('length');
  String? get scrollRestoration => throw UnimplementedError('scrollRestoration');
  set scrollRestoration(String? _) => throw UnimplementedError('scrollRestoration=');
  dynamic get state => throw UnimplementedError('state');
  factory History._() => throw UnimplementedError('_');
}

class IFrameElement extends HtmlElement {
  void remove();
  dynamic replaceWith(dynamic otherNode) => throw UnimplementedError('replaceWith');
  void insertAllBefore(Iterable<dynamic> newNodes, dynamic child) => throw UnimplementedError('insertAllBefore');
  String toString() => throw UnimplementedError('toString');
  dynamic append(dynamic node) => throw UnimplementedError('append');
  dynamic clone(bool? deep) => throw UnimplementedError('clone');
  bool contains(dynamic other) => throw UnimplementedError('contains');
  dynamic getRootNode([Map<dynamic, dynamic>? options]) => throw UnimplementedError('getRootNode');
  bool hasChildNodes() => throw UnimplementedError('hasChildNodes');
  dynamic insertBefore(dynamic node, dynamic child) => throw UnimplementedError('insertBefore');
  List<dynamic> get nodes => throw UnimplementedError('nodes');
  set nodes(List<dynamic> _) => throw UnimplementedError('nodes=');
  List<dynamic> get childNodes => throw UnimplementedError('childNodes');
  String? get baseUri => throw UnimplementedError('baseUri');
  dynamic get firstChild => throw UnimplementedError('firstChild');
  bool? get isConnected => throw UnimplementedError('isConnected');
  dynamic get lastChild => throw UnimplementedError('lastChild');
  dynamic get nextNode => throw UnimplementedError('nextNode');
  String? get nodeName => throw UnimplementedError('nodeName');
  int get nodeType => throw UnimplementedError('nodeType');
  String? get nodeValue => throw UnimplementedError('nodeValue');
  dynamic get ownerDocument => throw UnimplementedError('ownerDocument');
  Element? get parent => throw UnimplementedError('parent');
  dynamic get parentNode => throw UnimplementedError('parentNode');
  dynamic get previousNode => throw UnimplementedError('previousNode');
  String? get text => throw UnimplementedError('text');
  set text(String? _) => throw UnimplementedError('text=');
  void addEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  void removeEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  bool dispatchEvent(Event event);
  dynamic get on => throw UnimplementedError('on');
  bool operator ==(Object other) => throw UnimplementedError('==');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  Element? querySelector(String selectors);
  void after(Object nodes);
  void before(Object nodes);
  Element? get nextElementSibling => throw UnimplementedError('nextElementSibling');
  Element? get previousElementSibling => throw UnimplementedError('previousElementSibling');
  Stream<Event> get onAbort => throw UnimplementedError('onAbort');
  Stream<Event> get onBlur => throw UnimplementedError('onBlur');
  Stream<Event> get onCanPlay => throw UnimplementedError('onCanPlay');
  Stream<Event> get onCanPlayThrough => throw UnimplementedError('onCanPlayThrough');
  Stream<Event> get onChange => throw UnimplementedError('onChange');
  Stream<MouseEvent> get onClick => throw UnimplementedError('onClick');
  Stream<MouseEvent> get onContextMenu => throw UnimplementedError('onContextMenu');
  Stream<Event> get onDoubleClick => throw UnimplementedError('onDoubleClick');
  Stream<MouseEvent> get onDrag => throw UnimplementedError('onDrag');
  Stream<MouseEvent> get onDragEnd => throw UnimplementedError('onDragEnd');
  Stream<MouseEvent> get onDragEnter => throw UnimplementedError('onDragEnter');
  Stream<MouseEvent> get onDragLeave => throw UnimplementedError('onDragLeave');
  Stream<MouseEvent> get onDragOver => throw UnimplementedError('onDragOver');
  Stream<MouseEvent> get onDragStart => throw UnimplementedError('onDragStart');
  Stream<MouseEvent> get onDrop => throw UnimplementedError('onDrop');
  Stream<Event> get onDurationChange => throw UnimplementedError('onDurationChange');
  Stream<Event> get onEmptied => throw UnimplementedError('onEmptied');
  Stream<Event> get onEnded => throw UnimplementedError('onEnded');
  Stream<Event> get onError => throw UnimplementedError('onError');
  Stream<Event> get onFocus => throw UnimplementedError('onFocus');
  Stream<Event> get onInput => throw UnimplementedError('onInput');
  Stream<Event> get onInvalid => throw UnimplementedError('onInvalid');
  Stream<dynamic> get onKeyDown => throw UnimplementedError('onKeyDown');
  Stream<dynamic> get onKeyPress => throw UnimplementedError('onKeyPress');
  Stream<dynamic> get onKeyUp => throw UnimplementedError('onKeyUp');
  Stream<Event> get onLoad => throw UnimplementedError('onLoad');
  Stream<Event> get onLoadedData => throw UnimplementedError('onLoadedData');
  Stream<Event> get onLoadedMetadata => throw UnimplementedError('onLoadedMetadata');
  Stream<MouseEvent> get onMouseDown => throw UnimplementedError('onMouseDown');
  Stream<MouseEvent> get onMouseEnter => throw UnimplementedError('onMouseEnter');
  Stream<MouseEvent> get onMouseLeave => throw UnimplementedError('onMouseLeave');
  Stream<MouseEvent> get onMouseMove => throw UnimplementedError('onMouseMove');
  Stream<MouseEvent> get onMouseOut => throw UnimplementedError('onMouseOut');
  Stream<MouseEvent> get onMouseOver => throw UnimplementedError('onMouseOver');
  Stream<MouseEvent> get onMouseUp => throw UnimplementedError('onMouseUp');
  Stream<dynamic> get onMouseWheel => throw UnimplementedError('onMouseWheel');
  Stream<Event> get onPause => throw UnimplementedError('onPause');
  Stream<Event> get onPlay => throw UnimplementedError('onPlay');
  Stream<Event> get onPlaying => throw UnimplementedError('onPlaying');
  Stream<Event> get onRateChange => throw UnimplementedError('onRateChange');
  Stream<Event> get onReset => throw UnimplementedError('onReset');
  Stream<Event> get onResize => throw UnimplementedError('onResize');
  Stream<Event> get onScroll => throw UnimplementedError('onScroll');
  Stream<Event> get onSeeked => throw UnimplementedError('onSeeked');
  Stream<Event> get onSeeking => throw UnimplementedError('onSeeking');
  Stream<Event> get onSelect => throw UnimplementedError('onSelect');
  Stream<Event> get onStalled => throw UnimplementedError('onStalled');
  Stream<Event> get onSubmit => throw UnimplementedError('onSubmit');
  Stream<Event> get onSuspend => throw UnimplementedError('onSuspend');
  Stream<Event> get onTimeUpdate => throw UnimplementedError('onTimeUpdate');
  Stream<dynamic> get onTouchCancel => throw UnimplementedError('onTouchCancel');
  Stream<dynamic> get onTouchEnd => throw UnimplementedError('onTouchEnd');
  Stream<dynamic> get onTouchMove => throw UnimplementedError('onTouchMove');
  Stream<dynamic> get onTouchStart => throw UnimplementedError('onTouchStart');
  Stream<Event> get onVolumeChange => throw UnimplementedError('onVolumeChange');
  Stream<Event> get onWaiting => throw UnimplementedError('onWaiting');
  Stream<dynamic> get onWheel => throw UnimplementedError('onWheel');
  String? get nonce => throw UnimplementedError('nonce');
  set nonce(String? _) => throw UnimplementedError('nonce=');
  String? get allow => throw UnimplementedError('allow');
  set allow(String? _) => throw UnimplementedError('allow=');
  bool? get allowFullscreen => throw UnimplementedError('allowFullscreen');
  set allowFullscreen(bool? _) => throw UnimplementedError('allowFullscreen=');
  bool? get allowPaymentRequest => throw UnimplementedError('allowPaymentRequest');
  set allowPaymentRequest(bool? _) => throw UnimplementedError('allowPaymentRequest=');
  dynamic get contentWindow => throw UnimplementedError('contentWindow');
  String? get csp => throw UnimplementedError('csp');
  set csp(String? _) => throw UnimplementedError('csp=');
  String? get height => throw UnimplementedError('height');
  set height(String? _) => throw UnimplementedError('height=');
  String? get name => throw UnimplementedError('name');
  set name(String? _) => throw UnimplementedError('name=');
  String? get referrerPolicy => throw UnimplementedError('referrerPolicy');
  set referrerPolicy(String? _) => throw UnimplementedError('referrerPolicy=');
  dynamic get sandbox => throw UnimplementedError('sandbox');
  String? get src => throw UnimplementedError('src');
  set src(String? _) => throw UnimplementedError('src=');
  String? get srcdoc => throw UnimplementedError('srcdoc');
  set srcdoc(String? _) => throw UnimplementedError('srcdoc=');
  String? get width => throw UnimplementedError('width');
  set width(String? _) => throw UnimplementedError('width=');
  factory IFrameElement._() => throw UnimplementedError('_');
  factory IFrameElement() => throw UnimplementedError('');
  factory IFrameElement.created() => throw UnimplementedError('created');
}

class HtmlElement extends Element {
  void remove();
  dynamic replaceWith(dynamic otherNode) => throw UnimplementedError('replaceWith');
  void insertAllBefore(Iterable<dynamic> newNodes, dynamic child) => throw UnimplementedError('insertAllBefore');
  String toString() => throw UnimplementedError('toString');
  dynamic append(dynamic node) => throw UnimplementedError('append');
  dynamic clone(bool? deep) => throw UnimplementedError('clone');
  bool contains(dynamic other) => throw UnimplementedError('contains');
  dynamic getRootNode([Map<dynamic, dynamic>? options]) => throw UnimplementedError('getRootNode');
  bool hasChildNodes() => throw UnimplementedError('hasChildNodes');
  dynamic insertBefore(dynamic node, dynamic child) => throw UnimplementedError('insertBefore');
  List<dynamic> get nodes => throw UnimplementedError('nodes');
  set nodes(List<dynamic> _) => throw UnimplementedError('nodes=');
  List<dynamic> get childNodes => throw UnimplementedError('childNodes');
  String? get baseUri => throw UnimplementedError('baseUri');
  dynamic get firstChild => throw UnimplementedError('firstChild');
  bool? get isConnected => throw UnimplementedError('isConnected');
  dynamic get lastChild => throw UnimplementedError('lastChild');
  dynamic get nextNode => throw UnimplementedError('nextNode');
  String? get nodeName => throw UnimplementedError('nodeName');
  int get nodeType => throw UnimplementedError('nodeType');
  String? get nodeValue => throw UnimplementedError('nodeValue');
  dynamic get ownerDocument => throw UnimplementedError('ownerDocument');
  Element? get parent => throw UnimplementedError('parent');
  dynamic get parentNode => throw UnimplementedError('parentNode');
  dynamic get previousNode => throw UnimplementedError('previousNode');
  String? get text => throw UnimplementedError('text');
  set text(String? _) => throw UnimplementedError('text=');
  void addEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  void removeEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  bool dispatchEvent(Event event);
  dynamic get on => throw UnimplementedError('on');
  bool operator ==(Object other) => throw UnimplementedError('==');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  Element? querySelector(String selectors);
  void after(Object nodes);
  void before(Object nodes);
  Element? get nextElementSibling => throw UnimplementedError('nextElementSibling');
  Element? get previousElementSibling => throw UnimplementedError('previousElementSibling');
  Stream<Event> get onAbort => throw UnimplementedError('onAbort');
  Stream<Event> get onBlur => throw UnimplementedError('onBlur');
  Stream<Event> get onCanPlay => throw UnimplementedError('onCanPlay');
  Stream<Event> get onCanPlayThrough => throw UnimplementedError('onCanPlayThrough');
  Stream<Event> get onChange => throw UnimplementedError('onChange');
  Stream<MouseEvent> get onClick => throw UnimplementedError('onClick');
  Stream<MouseEvent> get onContextMenu => throw UnimplementedError('onContextMenu');
  Stream<Event> get onDoubleClick => throw UnimplementedError('onDoubleClick');
  Stream<MouseEvent> get onDrag => throw UnimplementedError('onDrag');
  Stream<MouseEvent> get onDragEnd => throw UnimplementedError('onDragEnd');
  Stream<MouseEvent> get onDragEnter => throw UnimplementedError('onDragEnter');
  Stream<MouseEvent> get onDragLeave => throw UnimplementedError('onDragLeave');
  Stream<MouseEvent> get onDragOver => throw UnimplementedError('onDragOver');
  Stream<MouseEvent> get onDragStart => throw UnimplementedError('onDragStart');
  Stream<MouseEvent> get onDrop => throw UnimplementedError('onDrop');
  Stream<Event> get onDurationChange => throw UnimplementedError('onDurationChange');
  Stream<Event> get onEmptied => throw UnimplementedError('onEmptied');
  Stream<Event> get onEnded => throw UnimplementedError('onEnded');
  Stream<Event> get onError => throw UnimplementedError('onError');
  Stream<Event> get onFocus => throw UnimplementedError('onFocus');
  Stream<Event> get onInput => throw UnimplementedError('onInput');
  Stream<Event> get onInvalid => throw UnimplementedError('onInvalid');
  Stream<dynamic> get onKeyDown => throw UnimplementedError('onKeyDown');
  Stream<dynamic> get onKeyPress => throw UnimplementedError('onKeyPress');
  Stream<dynamic> get onKeyUp => throw UnimplementedError('onKeyUp');
  Stream<Event> get onLoad => throw UnimplementedError('onLoad');
  Stream<Event> get onLoadedData => throw UnimplementedError('onLoadedData');
  Stream<Event> get onLoadedMetadata => throw UnimplementedError('onLoadedMetadata');
  Stream<MouseEvent> get onMouseDown => throw UnimplementedError('onMouseDown');
  Stream<MouseEvent> get onMouseEnter => throw UnimplementedError('onMouseEnter');
  Stream<MouseEvent> get onMouseLeave => throw UnimplementedError('onMouseLeave');
  Stream<MouseEvent> get onMouseMove => throw UnimplementedError('onMouseMove');
  Stream<MouseEvent> get onMouseOut => throw UnimplementedError('onMouseOut');
  Stream<MouseEvent> get onMouseOver => throw UnimplementedError('onMouseOver');
  Stream<MouseEvent> get onMouseUp => throw UnimplementedError('onMouseUp');
  Stream<dynamic> get onMouseWheel => throw UnimplementedError('onMouseWheel');
  Stream<Event> get onPause => throw UnimplementedError('onPause');
  Stream<Event> get onPlay => throw UnimplementedError('onPlay');
  Stream<Event> get onPlaying => throw UnimplementedError('onPlaying');
  Stream<Event> get onRateChange => throw UnimplementedError('onRateChange');
  Stream<Event> get onReset => throw UnimplementedError('onReset');
  Stream<Event> get onResize => throw UnimplementedError('onResize');
  Stream<Event> get onScroll => throw UnimplementedError('onScroll');
  Stream<Event> get onSeeked => throw UnimplementedError('onSeeked');
  Stream<Event> get onSeeking => throw UnimplementedError('onSeeking');
  Stream<Event> get onSelect => throw UnimplementedError('onSelect');
  Stream<Event> get onStalled => throw UnimplementedError('onStalled');
  Stream<Event> get onSubmit => throw UnimplementedError('onSubmit');
  Stream<Event> get onSuspend => throw UnimplementedError('onSuspend');
  Stream<Event> get onTimeUpdate => throw UnimplementedError('onTimeUpdate');
  Stream<dynamic> get onTouchCancel => throw UnimplementedError('onTouchCancel');
  Stream<dynamic> get onTouchEnd => throw UnimplementedError('onTouchEnd');
  Stream<dynamic> get onTouchMove => throw UnimplementedError('onTouchMove');
  Stream<dynamic> get onTouchStart => throw UnimplementedError('onTouchStart');
  Stream<Event> get onVolumeChange => throw UnimplementedError('onVolumeChange');
  Stream<Event> get onWaiting => throw UnimplementedError('onWaiting');
  Stream<dynamic> get onWheel => throw UnimplementedError('onWheel');
  String? get nonce => throw UnimplementedError('nonce');
  set nonce(String? _) => throw UnimplementedError('nonce=');
  factory HtmlElement() => throw UnimplementedError('');
  factory HtmlElement.created() => throw UnimplementedError('created');
}

class MessageEvent extends Event {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  dynamic get data => throw UnimplementedError('data');
  String get lastEventId => throw UnimplementedError('lastEventId');
  String get origin => throw UnimplementedError('origin');
  List<dynamic> get ports => throw UnimplementedError('ports');
  dynamic get source => throw UnimplementedError('source');
  String? get suborigin => throw UnimplementedError('suborigin');
  factory MessageEvent(String type,
          {bool canBubble = false,
          bool cancelable = false,
          Object? data,
          String? origin,
          String? lastEventId,
          Window? source,
          List<dynamic> messagePorts = const []}) =>
      throw UnimplementedError('');
  factory MessageEvent._(String type, [Map<dynamic, dynamic>? eventInitDict]) => throw UnimplementedError('_');
}

class Storage with MapMixin<String, String> {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  void addAll(Map<String, String> other) => throw UnimplementedError('addAll');
  bool containsValue(Object? value) => throw UnimplementedError('containsValue');
  bool containsKey(Object? key) => throw UnimplementedError('containsKey');
  String? operator [](Object? key) => throw UnimplementedError('[]');
  void operator []=(String key, String value) => throw UnimplementedError('[]=');
  String putIfAbsent(String key, String Function() ifAbsent) => throw UnimplementedError('putIfAbsent');
  String? remove(Object? key) => throw UnimplementedError('remove');
  void clear() => throw UnimplementedError('clear');
  void forEach(void Function(String, String) f) => throw UnimplementedError('forEach');
  Iterable<String> get keys => throw UnimplementedError('keys');
  Iterable<String> get values => throw UnimplementedError('values');
  int get length => throw UnimplementedError('length');
  bool get isEmpty => throw UnimplementedError('isEmpty');
  bool get isNotEmpty => throw UnimplementedError('isNotEmpty');
  factory Storage._() => throw UnimplementedError('_');
}

class Element {
  void remove();
  dynamic replaceWith(dynamic otherNode) => throw UnimplementedError('replaceWith');
  void insertAllBefore(Iterable<dynamic> newNodes, dynamic child) => throw UnimplementedError('insertAllBefore');
  String toString() => throw UnimplementedError('toString');
  dynamic append(dynamic node) => throw UnimplementedError('append');
  dynamic clone(bool? deep) => throw UnimplementedError('clone');
  bool contains(dynamic other) => throw UnimplementedError('contains');
  dynamic getRootNode([Map<dynamic, dynamic>? options]) => throw UnimplementedError('getRootNode');
  bool hasChildNodes() => throw UnimplementedError('hasChildNodes');
  dynamic insertBefore(dynamic node, dynamic child) => throw UnimplementedError('insertBefore');
  List<dynamic> get nodes => throw UnimplementedError('nodes');
  set nodes(List<dynamic> _) => throw UnimplementedError('nodes=');
  List<dynamic> get childNodes => throw UnimplementedError('childNodes');
  String? get baseUri => throw UnimplementedError('baseUri');
  dynamic get firstChild => throw UnimplementedError('firstChild');
  bool? get isConnected => throw UnimplementedError('isConnected');
  dynamic get lastChild => throw UnimplementedError('lastChild');
  dynamic get nextNode => throw UnimplementedError('nextNode');
  String? get nodeName => throw UnimplementedError('nodeName');
  int get nodeType => throw UnimplementedError('nodeType');
  String? get nodeValue => throw UnimplementedError('nodeValue');
  dynamic get ownerDocument => throw UnimplementedError('ownerDocument');
  Element? get parent => throw UnimplementedError('parent');
  dynamic get parentNode => throw UnimplementedError('parentNode');
  dynamic get previousNode => throw UnimplementedError('previousNode');
  String? get text => throw UnimplementedError('text');
  set text(String? _) => throw UnimplementedError('text=');
  void addEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  void removeEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  bool dispatchEvent(Event event);
  dynamic get on => throw UnimplementedError('on');
  bool operator ==(Object other) => throw UnimplementedError('==');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  Element? querySelector(String selectors) => throw UnimplementedError('querySelector');
  void after(Object nodes) => throw UnimplementedError('after');
  void before(Object nodes) => throw UnimplementedError('before');
  Element? get nextElementSibling => throw UnimplementedError('nextElementSibling');
  Element? get previousElementSibling => throw UnimplementedError('previousElementSibling');
  dynamic get onAbort => throw UnimplementedError('onAbort');
  dynamic get onBlur => throw UnimplementedError('onBlur');
  dynamic get onCanPlay => throw UnimplementedError('onCanPlay');
  dynamic get onCanPlayThrough => throw UnimplementedError('onCanPlayThrough');
  dynamic get onChange => throw UnimplementedError('onChange');
  dynamic get onClick => throw UnimplementedError('onClick');
  dynamic get onContextMenu => throw UnimplementedError('onContextMenu');
  dynamic get onDoubleClick => throw UnimplementedError('onDoubleClick');
  dynamic get onDrag => throw UnimplementedError('onDrag');
  dynamic get onDragEnd => throw UnimplementedError('onDragEnd');
  dynamic get onDragEnter => throw UnimplementedError('onDragEnter');
  dynamic get onDragLeave => throw UnimplementedError('onDragLeave');
  dynamic get onDragOver => throw UnimplementedError('onDragOver');
  dynamic get onDragStart => throw UnimplementedError('onDragStart');
  dynamic get onDrop => throw UnimplementedError('onDrop');
  dynamic get onDurationChange => throw UnimplementedError('onDurationChange');
  dynamic get onEmptied => throw UnimplementedError('onEmptied');
  dynamic get onEnded => throw UnimplementedError('onEnded');
  dynamic get onError => throw UnimplementedError('onError');
  dynamic get onFocus => throw UnimplementedError('onFocus');
  dynamic get onInput => throw UnimplementedError('onInput');
  dynamic get onInvalid => throw UnimplementedError('onInvalid');
  dynamic get onKeyDown => throw UnimplementedError('onKeyDown');
  dynamic get onKeyPress => throw UnimplementedError('onKeyPress');
  dynamic get onKeyUp => throw UnimplementedError('onKeyUp');
  dynamic get onLoad => throw UnimplementedError('onLoad');
  dynamic get onLoadedData => throw UnimplementedError('onLoadedData');
  dynamic get onLoadedMetadata => throw UnimplementedError('onLoadedMetadata');
  dynamic get onMouseDown => throw UnimplementedError('onMouseDown');
  dynamic get onMouseEnter => throw UnimplementedError('onMouseEnter');
  dynamic get onMouseLeave => throw UnimplementedError('onMouseLeave');
  dynamic get onMouseMove => throw UnimplementedError('onMouseMove');
  dynamic get onMouseOut => throw UnimplementedError('onMouseOut');
  dynamic get onMouseOver => throw UnimplementedError('onMouseOver');
  dynamic get onMouseUp => throw UnimplementedError('onMouseUp');
  dynamic get onMouseWheel => throw UnimplementedError('onMouseWheel');
  dynamic get onPause => throw UnimplementedError('onPause');
  dynamic get onPlay => throw UnimplementedError('onPlay');
  dynamic get onPlaying => throw UnimplementedError('onPlaying');
  dynamic get onRateChange => throw UnimplementedError('onRateChange');
  dynamic get onReset => throw UnimplementedError('onReset');
  dynamic get onResize => throw UnimplementedError('onResize');
  dynamic get onScroll => throw UnimplementedError('onScroll');
  dynamic get onSeeked => throw UnimplementedError('onSeeked');
  dynamic get onSeeking => throw UnimplementedError('onSeeking');
  dynamic get onSelect => throw UnimplementedError('onSelect');
  dynamic get onStalled => throw UnimplementedError('onStalled');
  dynamic get onSubmit => throw UnimplementedError('onSubmit');
  dynamic get onSuspend => throw UnimplementedError('onSuspend');
  dynamic get onTimeUpdate => throw UnimplementedError('onTimeUpdate');
  dynamic get onTouchCancel => throw UnimplementedError('onTouchCancel');
  dynamic get onTouchEnd => throw UnimplementedError('onTouchEnd');
  dynamic get onTouchMove => throw UnimplementedError('onTouchMove');
  dynamic get onTouchStart => throw UnimplementedError('onTouchStart');
  dynamic get onVolumeChange => throw UnimplementedError('onVolumeChange');
  dynamic get onWaiting => throw UnimplementedError('onWaiting');
  dynamic get onWheel => throw UnimplementedError('onWheel');
  String? getAttribute(String name) => throw UnimplementedError('getAttribute');
  String? getAttributeNS(String? namespaceURI, String name) => throw UnimplementedError('getAttributeNS');
  bool hasAttribute(String name) => throw UnimplementedError('hasAttribute');
  bool hasAttributeNS(String? namespaceURI, String name) => throw UnimplementedError('hasAttributeNS');
  void removeAttribute(String name) => throw UnimplementedError('removeAttribute');
  void removeAttributeNS(String? namespaceURI, String name) => throw UnimplementedError('removeAttributeNS');
  void setAttribute(String name, Object value) => throw UnimplementedError('setAttribute');
  void setAttributeNS(String? namespaceURI, String name, Object value) => throw UnimplementedError('setAttributeNS');
  dynamic querySelectorAll<T extends Element>(String selectors) => throw UnimplementedError('querySelectorAll');
  Future<dynamic> setApplyScroll(String nativeScrollBehavior) => throw UnimplementedError('setApplyScroll');
  Future<dynamic> setDistributeScroll(String nativeScrollBehavior) => throw UnimplementedError('setDistributeScroll');
  Map<String, String> getNamespacedAttributes(String namespace) => throw UnimplementedError('getNamespacedAttributes');
  dynamic getComputedStyle([String? pseudoElement]) => throw UnimplementedError('getComputedStyle');
  void appendText(String text) => throw UnimplementedError('appendText');
  void appendHtml(String text, {dynamic validator, dynamic treeSanitizer}) => throw UnimplementedError('appendHtml');
  static bool isTagSupported(String tag) => throw UnimplementedError('isTagSupported');
  void attached() => throw UnimplementedError('attached');
  void detached() => throw UnimplementedError('detached');
  void enteredView() => throw UnimplementedError('enteredView');
  List<Rectangle<num>> getClientRects() => throw UnimplementedError('getClientRects');
  void leftView() => throw UnimplementedError('leftView');
  dynamic animate(Iterable<Map<String, dynamic>> frames, [dynamic timing]) => throw UnimplementedError('animate');
  void attributeChanged(String name, String oldValue, String newValue) => throw UnimplementedError('attributeChanged');
  void scrollIntoView([dynamic alignment]) => throw UnimplementedError('scrollIntoView');
  void insertAdjacentText(String where, String text) => throw UnimplementedError('insertAdjacentText');
  void insertAdjacentHtml(String where, String html, {dynamic validator, dynamic treeSanitizer}) =>
      throw UnimplementedError('insertAdjacentHtml');
  Element insertAdjacentElement(String where, Element element) => throw UnimplementedError('insertAdjacentElement');
  bool matches(String selectors) => throw UnimplementedError('matches');
  bool matchesWithAncestors(String selectors) => throw UnimplementedError('matchesWithAncestors');
  dynamic createShadowRoot() => throw UnimplementedError('createShadowRoot');
  Point<num> offsetTo(Element parent) => throw UnimplementedError('offsetTo');
  dynamic createFragment(String? html, {dynamic validator, dynamic treeSanitizer}) =>
      throw UnimplementedError('createFragment');
  void setInnerHtml(String? html, {dynamic validator, dynamic treeSanitizer}) =>
      throw UnimplementedError('setInnerHtml');
  Future<void> requestFullscreen([Map<dynamic, dynamic>? options]) => throw UnimplementedError('requestFullscreen');
  void blur() => throw UnimplementedError('blur');
  void click() => throw UnimplementedError('click');
  void focus() => throw UnimplementedError('focus');
  dynamic attachShadow(Map<dynamic, dynamic> shadowRootInitDict) => throw UnimplementedError('attachShadow');
  Element? closest(String selectors) => throw UnimplementedError('closest');
  List<dynamic> getAnimations() => throw UnimplementedError('getAnimations');
  List<String> getAttributeNames() => throw UnimplementedError('getAttributeNames');
  Rectangle<num> getBoundingClientRect() => throw UnimplementedError('getBoundingClientRect');
  List<dynamic> getDestinationInsertionPoints() => throw UnimplementedError('getDestinationInsertionPoints');
  List<dynamic> getElementsByClassName(String classNames) => throw UnimplementedError('getElementsByClassName');
  bool hasPointerCapture(int pointerId) => throw UnimplementedError('hasPointerCapture');
  void releasePointerCapture(int pointerId) => throw UnimplementedError('releasePointerCapture');
  void requestPointerLock() => throw UnimplementedError('requestPointerLock');
  void scroll([dynamic options_OR_x, num? y]) => throw UnimplementedError('scroll');
  void scrollBy([dynamic options_OR_x, num? y]) => throw UnimplementedError('scrollBy');
  void scrollIntoViewIfNeeded([bool? centerIfNeeded]) => throw UnimplementedError('scrollIntoViewIfNeeded');
  void scrollTo([dynamic options_OR_x, num? y]) => throw UnimplementedError('scrollTo');
  void setPointerCapture(int pointerId) => throw UnimplementedError('setPointerCapture');
  static dynamic get mouseWheelEvent => throw UnimplementedError('mouseWheelEvent');
  static dynamic get transitionEndEvent => throw UnimplementedError('transitionEndEvent');
  static dynamic get abortEvent => throw UnimplementedError('abortEvent');
  static dynamic get beforeCopyEvent => throw UnimplementedError('beforeCopyEvent');
  static dynamic get beforeCutEvent => throw UnimplementedError('beforeCutEvent');
  static dynamic get beforePasteEvent => throw UnimplementedError('beforePasteEvent');
  static dynamic get blurEvent => throw UnimplementedError('blurEvent');
  static dynamic get canPlayEvent => throw UnimplementedError('canPlayEvent');
  static dynamic get canPlayThroughEvent => throw UnimplementedError('canPlayThroughEvent');
  static dynamic get changeEvent => throw UnimplementedError('changeEvent');
  static dynamic get clickEvent => throw UnimplementedError('clickEvent');
  static dynamic get contextMenuEvent => throw UnimplementedError('contextMenuEvent');
  static dynamic get copyEvent => throw UnimplementedError('copyEvent');
  static dynamic get cutEvent => throw UnimplementedError('cutEvent');
  static dynamic get doubleClickEvent => throw UnimplementedError('doubleClickEvent');
  static dynamic get dragEvent => throw UnimplementedError('dragEvent');
  static dynamic get dragEndEvent => throw UnimplementedError('dragEndEvent');
  static dynamic get dragEnterEvent => throw UnimplementedError('dragEnterEvent');
  static dynamic get dragLeaveEvent => throw UnimplementedError('dragLeaveEvent');
  static dynamic get dragOverEvent => throw UnimplementedError('dragOverEvent');
  static dynamic get dragStartEvent => throw UnimplementedError('dragStartEvent');
  static dynamic get dropEvent => throw UnimplementedError('dropEvent');
  static dynamic get durationChangeEvent => throw UnimplementedError('durationChangeEvent');
  static dynamic get emptiedEvent => throw UnimplementedError('emptiedEvent');
  static dynamic get endedEvent => throw UnimplementedError('endedEvent');
  static dynamic get errorEvent => throw UnimplementedError('errorEvent');
  static dynamic get focusEvent => throw UnimplementedError('focusEvent');
  static dynamic get inputEvent => throw UnimplementedError('inputEvent');
  static dynamic get invalidEvent => throw UnimplementedError('invalidEvent');
  static dynamic get keyDownEvent => throw UnimplementedError('keyDownEvent');
  static dynamic get keyPressEvent => throw UnimplementedError('keyPressEvent');
  static dynamic get keyUpEvent => throw UnimplementedError('keyUpEvent');
  static dynamic get loadEvent => throw UnimplementedError('loadEvent');
  static dynamic get loadedDataEvent => throw UnimplementedError('loadedDataEvent');
  static dynamic get loadedMetadataEvent => throw UnimplementedError('loadedMetadataEvent');
  static dynamic get mouseDownEvent => throw UnimplementedError('mouseDownEvent');
  static dynamic get mouseEnterEvent => throw UnimplementedError('mouseEnterEvent');
  static dynamic get mouseLeaveEvent => throw UnimplementedError('mouseLeaveEvent');
  static dynamic get mouseMoveEvent => throw UnimplementedError('mouseMoveEvent');
  static dynamic get mouseOutEvent => throw UnimplementedError('mouseOutEvent');
  static dynamic get mouseOverEvent => throw UnimplementedError('mouseOverEvent');
  static dynamic get mouseUpEvent => throw UnimplementedError('mouseUpEvent');
  static dynamic get pasteEvent => throw UnimplementedError('pasteEvent');
  static dynamic get pauseEvent => throw UnimplementedError('pauseEvent');
  static dynamic get playEvent => throw UnimplementedError('playEvent');
  static dynamic get playingEvent => throw UnimplementedError('playingEvent');
  static dynamic get rateChangeEvent => throw UnimplementedError('rateChangeEvent');
  static dynamic get resetEvent => throw UnimplementedError('resetEvent');
  static dynamic get resizeEvent => throw UnimplementedError('resizeEvent');
  static dynamic get scrollEvent => throw UnimplementedError('scrollEvent');
  static dynamic get searchEvent => throw UnimplementedError('searchEvent');
  static dynamic get seekedEvent => throw UnimplementedError('seekedEvent');
  static dynamic get seekingEvent => throw UnimplementedError('seekingEvent');
  static dynamic get selectEvent => throw UnimplementedError('selectEvent');
  static dynamic get selectStartEvent => throw UnimplementedError('selectStartEvent');
  static dynamic get stalledEvent => throw UnimplementedError('stalledEvent');
  static dynamic get submitEvent => throw UnimplementedError('submitEvent');
  static dynamic get suspendEvent => throw UnimplementedError('suspendEvent');
  static dynamic get timeUpdateEvent => throw UnimplementedError('timeUpdateEvent');
  static dynamic get touchCancelEvent => throw UnimplementedError('touchCancelEvent');
  static dynamic get touchEndEvent => throw UnimplementedError('touchEndEvent');
  static dynamic get touchEnterEvent => throw UnimplementedError('touchEnterEvent');
  static dynamic get touchLeaveEvent => throw UnimplementedError('touchLeaveEvent');
  static dynamic get touchMoveEvent => throw UnimplementedError('touchMoveEvent');
  static dynamic get touchStartEvent => throw UnimplementedError('touchStartEvent');
  static dynamic get volumeChangeEvent => throw UnimplementedError('volumeChangeEvent');
  static dynamic get waitingEvent => throw UnimplementedError('waitingEvent');
  static dynamic get fullscreenChangeEvent => throw UnimplementedError('fullscreenChangeEvent');
  static dynamic get fullscreenErrorEvent => throw UnimplementedError('fullscreenErrorEvent');
  static dynamic get wheelEvent => throw UnimplementedError('wheelEvent');
  Map<String, String> get attributes => throw UnimplementedError('attributes');
  set attributes(Map<String, String> _) => throw UnimplementedError('attributes=');
  List<Element> get children => throw UnimplementedError('children');
  set children(List<Element> _) => throw UnimplementedError('children=');
  dynamic get classes => throw UnimplementedError('classes');
  set classes(dynamic _) => throw UnimplementedError('classes=');
  Map<String, String> get dataset => throw UnimplementedError('dataset');
  set dataset(Map<String, String> _) => throw UnimplementedError('dataset=');
  Rectangle<num> get client => throw UnimplementedError('client');
  Rectangle<num> get offset => throw UnimplementedError('offset');
  String get localName => throw UnimplementedError('localName');
  String? get namespaceUri => throw UnimplementedError('namespaceUri');
  dynamic get shadowRoot => throw UnimplementedError('shadowRoot');
  dynamic get contentEdge => throw UnimplementedError('contentEdge');
  dynamic get paddingEdge => throw UnimplementedError('paddingEdge');
  dynamic get borderEdge => throw UnimplementedError('borderEdge');
  dynamic get marginEdge => throw UnimplementedError('marginEdge');
  Point<num> get documentOffset => throw UnimplementedError('documentOffset');
  set innerHtml(String? _) => throw UnimplementedError('innerHtml=');
  String? get innerHtml => throw UnimplementedError('innerHtml');
  String get innerText => throw UnimplementedError('innerText');
  set innerText(String _) => throw UnimplementedError('innerText=');
  Element? get offsetParent => throw UnimplementedError('offsetParent');
  int get offsetHeight => throw UnimplementedError('offsetHeight');
  int get offsetLeft => throw UnimplementedError('offsetLeft');
  int get offsetTop => throw UnimplementedError('offsetTop');
  int get offsetWidth => throw UnimplementedError('offsetWidth');
  int get scrollHeight => throw UnimplementedError('scrollHeight');
  int get scrollLeft => throw UnimplementedError('scrollLeft');
  set scrollLeft(int _) => throw UnimplementedError('scrollLeft=');
  int get scrollTop => throw UnimplementedError('scrollTop');
  set scrollTop(int _) => throw UnimplementedError('scrollTop=');
  int get scrollWidth => throw UnimplementedError('scrollWidth');
  String get contentEditable => throw UnimplementedError('contentEditable');
  set contentEditable(String _) => throw UnimplementedError('contentEditable=');
  String? get dir => throw UnimplementedError('dir');
  set dir(String? _) => throw UnimplementedError('dir=');
  bool get draggable => throw UnimplementedError('draggable');
  set draggable(bool _) => throw UnimplementedError('draggable=');
  bool get hidden => throw UnimplementedError('hidden');
  set hidden(bool _) => throw UnimplementedError('hidden=');
  bool? get inert => throw UnimplementedError('inert');
  set inert(bool? _) => throw UnimplementedError('inert=');
  String? get inputMode => throw UnimplementedError('inputMode');
  set inputMode(String? _) => throw UnimplementedError('inputMode=');
  bool? get isContentEditable => throw UnimplementedError('isContentEditable');
  String? get lang => throw UnimplementedError('lang');
  set lang(String? _) => throw UnimplementedError('lang=');
  bool? get spellcheck => throw UnimplementedError('spellcheck');
  set spellcheck(bool? _) => throw UnimplementedError('spellcheck=');
  dynamic get style => throw UnimplementedError('style');
  int? get tabIndex => throw UnimplementedError('tabIndex');
  set tabIndex(int? _) => throw UnimplementedError('tabIndex=');
  String? get title => throw UnimplementedError('title');
  set title(String? _) => throw UnimplementedError('title=');
  bool? get translate => throw UnimplementedError('translate');
  set translate(bool? _) => throw UnimplementedError('translate=');
  dynamic get accessibleNode => throw UnimplementedError('accessibleNode');
  dynamic get assignedSlot => throw UnimplementedError('assignedSlot');
  String get className => throw UnimplementedError('className');
  set className(String _) => throw UnimplementedError('className=');
  int get clientHeight => throw UnimplementedError('clientHeight');
  int? get clientLeft => throw UnimplementedError('clientLeft');
  int? get clientTop => throw UnimplementedError('clientTop');
  int get clientWidth => throw UnimplementedError('clientWidth');
  String? get computedName => throw UnimplementedError('computedName');
  String? get computedRole => throw UnimplementedError('computedRole');
  String get id => throw UnimplementedError('id');
  set id(String _) => throw UnimplementedError('id=');
  String? get outerHtml => throw UnimplementedError('outerHtml');
  String? get slot => throw UnimplementedError('slot');
  set slot(String? _) => throw UnimplementedError('slot=');
  dynamic get styleMap => throw UnimplementedError('styleMap');
  String get tagName => throw UnimplementedError('tagName');
  dynamic get onBeforeCopy => throw UnimplementedError('onBeforeCopy');
  dynamic get onBeforeCut => throw UnimplementedError('onBeforeCut');
  dynamic get onBeforePaste => throw UnimplementedError('onBeforePaste');
  dynamic get onCopy => throw UnimplementedError('onCopy');
  dynamic get onCut => throw UnimplementedError('onCut');
  dynamic get onPaste => throw UnimplementedError('onPaste');
  dynamic get onSearch => throw UnimplementedError('onSearch');
  dynamic get onSelectStart => throw UnimplementedError('onSelectStart');
  dynamic get onTouchEnter => throw UnimplementedError('onTouchEnter');
  dynamic get onTouchLeave => throw UnimplementedError('onTouchLeave');
  dynamic get onTransitionEnd => throw UnimplementedError('onTransitionEnd');
  dynamic get onFullscreenChange => throw UnimplementedError('onFullscreenChange');
  dynamic get onFullscreenError => throw UnimplementedError('onFullscreenError');
  factory Element.html(String? html, {dynamic validator, dynamic treeSanitizer}) => throw UnimplementedError('html');
  factory Element.created() => throw UnimplementedError('created');
  factory Element.tag(String tag, [String? typeExtension]) => throw UnimplementedError('tag');
  factory Element.a() => throw UnimplementedError('a');
  factory Element.article() => throw UnimplementedError('article');
  factory Element.aside() => throw UnimplementedError('aside');
  factory Element.audio() => throw UnimplementedError('audio');
  factory Element.br() => throw UnimplementedError('br');
  factory Element.canvas() => throw UnimplementedError('canvas');
  factory Element.div() => throw UnimplementedError('div');
  factory Element.footer() => throw UnimplementedError('footer');
  factory Element.header() => throw UnimplementedError('header');
  factory Element.hr() => throw UnimplementedError('hr');
  factory Element.iframe() => throw UnimplementedError('iframe');
  factory Element.img() => throw UnimplementedError('img');
  factory Element.li() => throw UnimplementedError('li');
  factory Element.nav() => throw UnimplementedError('nav');
  factory Element.ol() => throw UnimplementedError('ol');
  factory Element.option() => throw UnimplementedError('option');
  factory Element.p() => throw UnimplementedError('p');
  factory Element.pre() => throw UnimplementedError('pre');
  factory Element.section() => throw UnimplementedError('section');
  factory Element.select() => throw UnimplementedError('select');
  factory Element.span() => throw UnimplementedError('span');
  factory Element.svg() => throw UnimplementedError('svg');
  factory Element.table() => throw UnimplementedError('table');
  factory Element.td() => throw UnimplementedError('td');
  factory Element.textarea() => throw UnimplementedError('textarea');
  factory Element.th() => throw UnimplementedError('th');
  factory Element.tr() => throw UnimplementedError('tr');
  factory Element.ul() => throw UnimplementedError('ul');
  factory Element.video() => throw UnimplementedError('video');
  factory Element._() => throw UnimplementedError('_');
}

class MouseEvent extends UIEvent {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  bool getModifierState(String keyArg) => throw UnimplementedError('getModifierState');
  bool get altKey => throw UnimplementedError('altKey');
  int get button => throw UnimplementedError('button');
  int? get buttons => throw UnimplementedError('buttons');
  bool get ctrlKey => throw UnimplementedError('ctrlKey');
  dynamic get fromElement => throw UnimplementedError('fromElement');
  bool get metaKey => throw UnimplementedError('metaKey');
  String? get region => throw UnimplementedError('region');
  dynamic get relatedTarget => throw UnimplementedError('relatedTarget');
  bool get shiftKey => throw UnimplementedError('shiftKey');
  dynamic get toElement => throw UnimplementedError('toElement');
  Point<num> get client => throw UnimplementedError('client');
  Point<num> get movement => throw UnimplementedError('movement');
  Point<num> get offset => throw UnimplementedError('offset');
  Point<num> get screen => throw UnimplementedError('screen');
  Point<num> get layer => throw UnimplementedError('layer');
  Point<num> get page => throw UnimplementedError('page');
  dynamic get dataTransfer => throw UnimplementedError('dataTransfer');
  factory MouseEvent(String type,
          {Window? view,
          int detail = 0,
          int screenX = 0,
          int screenY = 0,
          int clientX = 0,
          int clientY = 0,
          int button = 0,
          bool canBubble = true,
          bool cancelable = true,
          bool ctrlKey = false,
          bool altKey = false,
          bool shiftKey = false,
          bool metaKey = false,
          dynamic relatedTarget}) =>
      throw UnimplementedError('');
  factory MouseEvent._(String type, [Map<dynamic, dynamic>? eventInitDict]) => throw UnimplementedError('_');
}

class UIEvent extends Event {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  int? get detail => throw UnimplementedError('detail');
  dynamic get sourceCapabilities => throw UnimplementedError('sourceCapabilities');
  dynamic get view => throw UnimplementedError('view');
  factory UIEvent(String type, {Window? view, int detail = 0, bool canBubble = true, bool cancelable = true}) =>
      throw UnimplementedError('');
  factory UIEvent._(String type, [Map<dynamic, dynamic>? eventInitDict]) => throw UnimplementedError('_');
}

class Event {
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  List<dynamic> composedPath() => throw UnimplementedError('composedPath');
  void preventDefault() => throw UnimplementedError('preventDefault');
  void stopImmediatePropagation() => throw UnimplementedError('stopImmediatePropagation');
  void stopPropagation() => throw UnimplementedError('stopPropagation');
  static int get AT_TARGET => throw UnimplementedError('AT_TARGET');
  static int get BUBBLING_PHASE => throw UnimplementedError('BUBBLING_PHASE');
  static int get CAPTURING_PHASE => throw UnimplementedError('CAPTURING_PHASE');
  Element get matchingTarget => throw UnimplementedError('matchingTarget');
  List<dynamic> get path => throw UnimplementedError('path');
  bool? get bubbles => throw UnimplementedError('bubbles');
  bool? get cancelable => throw UnimplementedError('cancelable');
  bool? get composed => throw UnimplementedError('composed');
  dynamic get currentTarget => throw UnimplementedError('currentTarget');
  bool get defaultPrevented => throw UnimplementedError('defaultPrevented');
  int get eventPhase => throw UnimplementedError('eventPhase');
  bool? get isTrusted => throw UnimplementedError('isTrusted');
  dynamic get target => throw UnimplementedError('target');
  num? get timeStamp => throw UnimplementedError('timeStamp');
  String get type => throw UnimplementedError('type');
  factory Event(String type, {bool canBubble = true, bool cancelable = true}) => throw UnimplementedError('');
  factory Event.eventType(String type, String name, {bool canBubble = true, bool cancelable = true}) =>
      throw UnimplementedError('eventType');
  factory Event._(String type, [Map<dynamic, dynamic>? eventInitDict]) => throw UnimplementedError('_');
}

class HtmlDocument {
  dynamic adoptNode(dynamic node) => throw UnimplementedError('adoptNode');
  dynamic createDocumentFragment() => throw UnimplementedError('createDocumentFragment');
  dynamic createRange() => throw UnimplementedError('createRange');
  bool execCommand(String commandId, [bool? showUI, String? value]) => throw UnimplementedError('execCommand');
  void exitFullscreen() => throw UnimplementedError('exitFullscreen');
  void exitPointerLock() => throw UnimplementedError('exitPointerLock');
  List<dynamic> getAnimations() => throw UnimplementedError('getAnimations');
  List<dynamic> getElementsByClassName(String classNames) => throw UnimplementedError('getElementsByClassName');
  List<dynamic> getElementsByName(String elementName) => throw UnimplementedError('getElementsByName');
  List<dynamic> getElementsByTagName(String localName) => throw UnimplementedError('getElementsByTagName');
  dynamic importNode(dynamic node, [bool? deep]) => throw UnimplementedError('importNode');
  bool queryCommandEnabled(String commandId) => throw UnimplementedError('queryCommandEnabled');
  bool queryCommandIndeterm(String commandId) => throw UnimplementedError('queryCommandIndeterm');
  bool queryCommandState(String commandId) => throw UnimplementedError('queryCommandState');
  bool queryCommandSupported(String commandId) => throw UnimplementedError('queryCommandSupported');
  String queryCommandValue(String commandId) => throw UnimplementedError('queryCommandValue');
  Function registerElement2(String tag, [Map<dynamic, dynamic>? options]) =>
      throw UnimplementedError('registerElement2');
  List<Element> elementsFromPoint(int x, int y) => throw UnimplementedError('elementsFromPoint');
  Element? getElementById(String elementId) => throw UnimplementedError('getElementById');
  Element? querySelector(String selectors) => throw UnimplementedError('querySelector');
  dynamic querySelectorAll<T extends Element>(String selectors) => throw UnimplementedError('querySelectorAll');
  void registerElement(String tag, Type customElementClass, {String? extendsTag}) =>
      throw UnimplementedError('registerElement');
  Element createElement(String tagName, [String? typeExtension]) => throw UnimplementedError('createElement');
  Element createElementNS(String namespaceURI, String qualifiedName, [String? typeExtension]) =>
      throw UnimplementedError('createElementNS');
  String? get addressSpace => throw UnimplementedError('addressSpace');
  String? get contentType => throw UnimplementedError('contentType');
  String? get cookie => throw UnimplementedError('cookie');
  set cookie(String? _) => throw UnimplementedError('cookie=');
  dynamic get currentScript => throw UnimplementedError('currentScript');
  dynamic get window => throw UnimplementedError('window');
  Element? get documentElement => throw UnimplementedError('documentElement');
  String? get domain => throw UnimplementedError('domain');
  bool? get fullscreenEnabled => throw UnimplementedError('fullscreenEnabled');
  bool? get hidden => throw UnimplementedError('hidden');
  dynamic get implementation => throw UnimplementedError('implementation');
  String? get origin => throw UnimplementedError('origin');
  String? get readyState => throw UnimplementedError('readyState');
  dynamic get rootElement => throw UnimplementedError('rootElement');
  Element? get rootScroller => throw UnimplementedError('rootScroller');
  set rootScroller(Element? _) => throw UnimplementedError('rootScroller=');
  Element? get scrollingElement => throw UnimplementedError('scrollingElement');
  String? get suborigin => throw UnimplementedError('suborigin');
  dynamic get timeline => throw UnimplementedError('timeline');
  Element? get activeElement => throw UnimplementedError('activeElement');
  Element? get fullscreenElement => throw UnimplementedError('fullscreenElement');
  Element? get pointerLockElement => throw UnimplementedError('pointerLockElement');
  dynamic get fonts => throw UnimplementedError('fonts');
  Stream<Event> get onAbort => throw UnimplementedError('onAbort');
  Stream<Event> get onBeforeCopy => throw UnimplementedError('onBeforeCopy');
  Stream<Event> get onBeforeCut => throw UnimplementedError('onBeforeCut');
  Stream<Event> get onBeforePaste => throw UnimplementedError('onBeforePaste');
  Stream<Event> get onBlur => throw UnimplementedError('onBlur');
  Stream<Event> get onCanPlay => throw UnimplementedError('onCanPlay');
  Stream<Event> get onCanPlayThrough => throw UnimplementedError('onCanPlayThrough');
  Stream<Event> get onChange => throw UnimplementedError('onChange');
  Stream<MouseEvent> get onClick => throw UnimplementedError('onClick');
  Stream<MouseEvent> get onContextMenu => throw UnimplementedError('onContextMenu');
  Stream<dynamic> get onCopy => throw UnimplementedError('onCopy');
  Stream<dynamic> get onCut => throw UnimplementedError('onCut');
  Stream<Event> get onDoubleClick => throw UnimplementedError('onDoubleClick');
  Stream<MouseEvent> get onDrag => throw UnimplementedError('onDrag');
  Stream<MouseEvent> get onDragEnd => throw UnimplementedError('onDragEnd');
  Stream<MouseEvent> get onDragEnter => throw UnimplementedError('onDragEnter');
  Stream<MouseEvent> get onDragLeave => throw UnimplementedError('onDragLeave');
  Stream<MouseEvent> get onDragOver => throw UnimplementedError('onDragOver');
  Stream<MouseEvent> get onDragStart => throw UnimplementedError('onDragStart');
  Stream<MouseEvent> get onDrop => throw UnimplementedError('onDrop');
  Stream<Event> get onDurationChange => throw UnimplementedError('onDurationChange');
  Stream<Event> get onEmptied => throw UnimplementedError('onEmptied');
  Stream<Event> get onEnded => throw UnimplementedError('onEnded');
  Stream<Event> get onError => throw UnimplementedError('onError');
  Stream<Event> get onFocus => throw UnimplementedError('onFocus');
  Stream<Event> get onInput => throw UnimplementedError('onInput');
  Stream<Event> get onInvalid => throw UnimplementedError('onInvalid');
  Stream<dynamic> get onKeyDown => throw UnimplementedError('onKeyDown');
  Stream<dynamic> get onKeyPress => throw UnimplementedError('onKeyPress');
  Stream<dynamic> get onKeyUp => throw UnimplementedError('onKeyUp');
  Stream<Event> get onLoad => throw UnimplementedError('onLoad');
  Stream<Event> get onLoadedData => throw UnimplementedError('onLoadedData');
  Stream<Event> get onLoadedMetadata => throw UnimplementedError('onLoadedMetadata');
  Stream<MouseEvent> get onMouseDown => throw UnimplementedError('onMouseDown');
  Stream<MouseEvent> get onMouseEnter => throw UnimplementedError('onMouseEnter');
  Stream<MouseEvent> get onMouseLeave => throw UnimplementedError('onMouseLeave');
  Stream<MouseEvent> get onMouseMove => throw UnimplementedError('onMouseMove');
  Stream<MouseEvent> get onMouseOut => throw UnimplementedError('onMouseOut');
  Stream<MouseEvent> get onMouseOver => throw UnimplementedError('onMouseOver');
  Stream<MouseEvent> get onMouseUp => throw UnimplementedError('onMouseUp');
  Stream<dynamic> get onMouseWheel => throw UnimplementedError('onMouseWheel');
  Stream<dynamic> get onPaste => throw UnimplementedError('onPaste');
  Stream<Event> get onPause => throw UnimplementedError('onPause');
  Stream<Event> get onPlay => throw UnimplementedError('onPlay');
  Stream<Event> get onPlaying => throw UnimplementedError('onPlaying');
  Stream<Event> get onPointerLockChange => throw UnimplementedError('onPointerLockChange');
  Stream<Event> get onPointerLockError => throw UnimplementedError('onPointerLockError');
  Stream<Event> get onRateChange => throw UnimplementedError('onRateChange');
  Stream<Event> get onReadyStateChange => throw UnimplementedError('onReadyStateChange');
  Stream<Event> get onReset => throw UnimplementedError('onReset');
  Stream<Event> get onResize => throw UnimplementedError('onResize');
  Stream<Event> get onScroll => throw UnimplementedError('onScroll');
  Stream<Event> get onSearch => throw UnimplementedError('onSearch');
  Stream<dynamic> get onSecurityPolicyViolation => throw UnimplementedError('onSecurityPolicyViolation');
  Stream<Event> get onSeeked => throw UnimplementedError('onSeeked');
  Stream<Event> get onSeeking => throw UnimplementedError('onSeeking');
  Stream<Event> get onSelect => throw UnimplementedError('onSelect');
  Stream<Event> get onSelectionChange => throw UnimplementedError('onSelectionChange');
  Stream<Event> get onSelectStart => throw UnimplementedError('onSelectStart');
  Stream<Event> get onStalled => throw UnimplementedError('onStalled');
  Stream<Event> get onSubmit => throw UnimplementedError('onSubmit');
  Stream<Event> get onSuspend => throw UnimplementedError('onSuspend');
  Stream<Event> get onTimeUpdate => throw UnimplementedError('onTimeUpdate');
  Stream<dynamic> get onTouchCancel => throw UnimplementedError('onTouchCancel');
  Stream<dynamic> get onTouchEnd => throw UnimplementedError('onTouchEnd');
  Stream<dynamic> get onTouchMove => throw UnimplementedError('onTouchMove');
  Stream<dynamic> get onTouchStart => throw UnimplementedError('onTouchStart');
  Stream<Event> get onVolumeChange => throw UnimplementedError('onVolumeChange');
  Stream<Event> get onWaiting => throw UnimplementedError('onWaiting');
  Stream<Event> get onFullscreenChange => throw UnimplementedError('onFullscreenChange');
  Stream<Event> get onFullscreenError => throw UnimplementedError('onFullscreenError');
  bool get supportsRegisterElement => throw UnimplementedError('supportsRegisterElement');
  bool get supportsRegister => throw UnimplementedError('supportsRegister');
  String get visibilityState => throw UnimplementedError('visibilityState');
  void remove() => throw UnimplementedError('remove');
  dynamic replaceWith(dynamic otherNode) => throw UnimplementedError('replaceWith');
  void insertAllBefore(Iterable<dynamic> newNodes, dynamic child) => throw UnimplementedError('insertAllBefore');
  String toString() => throw UnimplementedError('toString');
  dynamic append(dynamic node) => throw UnimplementedError('append');
  dynamic clone(bool? deep) => throw UnimplementedError('clone');
  bool contains(dynamic other) => throw UnimplementedError('contains');
  dynamic getRootNode([Map<dynamic, dynamic>? options]) => throw UnimplementedError('getRootNode');
  bool hasChildNodes() => throw UnimplementedError('hasChildNodes');
  dynamic insertBefore(dynamic node, dynamic child) => throw UnimplementedError('insertBefore');
  List<dynamic> get nodes => throw UnimplementedError('nodes');
  set nodes(List<dynamic> _) => throw UnimplementedError('nodes=');
  List<dynamic> get childNodes => throw UnimplementedError('childNodes');
  String? get baseUri => throw UnimplementedError('baseUri');
  dynamic get firstChild => throw UnimplementedError('firstChild');
  bool? get isConnected => throw UnimplementedError('isConnected');
  dynamic get lastChild => throw UnimplementedError('lastChild');
  dynamic get nextNode => throw UnimplementedError('nextNode');
  String? get nodeName => throw UnimplementedError('nodeName');
  int get nodeType => throw UnimplementedError('nodeType');
  String? get nodeValue => throw UnimplementedError('nodeValue');
  dynamic get ownerDocument => throw UnimplementedError('ownerDocument');
  Element? get parent => throw UnimplementedError('parent');
  dynamic get parentNode => throw UnimplementedError('parentNode');
  dynamic get previousNode => throw UnimplementedError('previousNode');
  String? get text => throw UnimplementedError('text');
  set text(String? _) => throw UnimplementedError('text=');
  void addEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]) =>
      throw UnimplementedError('addEventListener');
  void removeEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]) =>
      throw UnimplementedError('removeEventListener');
  bool dispatchEvent(Event event) => throw UnimplementedError('dispatchEvent');
  dynamic get on => throw UnimplementedError('on');
  bool operator ==(Object other) => throw UnimplementedError('==');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  dynamic caretRangeFromPoint(int? x, int? y) => throw UnimplementedError('caretRangeFromPoint');
  Element? elementFromPoint(int x, int y) => throw UnimplementedError('elementFromPoint');
  void register(String tag, Type customElementClass, {String? extendsTag}) => throw UnimplementedError('register');
  dynamic createElementUpgrader(Type type, {String? extendsTag}) => throw UnimplementedError('createElementUpgrader');
  static dynamic get visibilityChangeEvent => throw UnimplementedError('visibilityChangeEvent');
  dynamic get body => throw UnimplementedError('body');
  set body(dynamic _) => throw UnimplementedError('body=');
  dynamic get head => throw UnimplementedError('head');
  String? get lastModified => throw UnimplementedError('lastModified');
  String? get preferredStylesheetSet => throw UnimplementedError('preferredStylesheetSet');
  String get referrer => throw UnimplementedError('referrer');
  String? get selectedStylesheetSet => throw UnimplementedError('selectedStylesheetSet');
  set selectedStylesheetSet(String? _) => throw UnimplementedError('selectedStylesheetSet=');
  List<dynamic>? get styleSheets => throw UnimplementedError('styleSheets');
  String get title => throw UnimplementedError('title');
  set title(String _) => throw UnimplementedError('title=');
  Stream<Event> get onVisibilityChange => throw UnimplementedError('onVisibilityChange');
  factory HtmlDocument._() => throw UnimplementedError('_');
}

HtmlDocument get document => throw UnimplementedError('document');

class Window {
  void addEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  void removeEventListener(String type, dynamic Function(Event)? listener, [bool? useCapture]);
  bool dispatchEvent(Event event);
  dynamic get on => throw UnimplementedError('on');
  bool operator ==(Object other) => throw UnimplementedError('==');
  String toString() => throw UnimplementedError('toString');
  dynamic noSuchMethod(Invocation invocation) => throw UnimplementedError('noSuchMethod');
  int get hashCode => throw UnimplementedError('hashCode');
  Type get runtimeType => throw UnimplementedError('runtimeType');
  Stream<Event> get onAbort => throw UnimplementedError('onAbort');
  Stream<Event> get onBlur => throw UnimplementedError('onBlur');
  Stream<Event> get onCanPlay => throw UnimplementedError('onCanPlay');
  Stream<Event> get onCanPlayThrough => throw UnimplementedError('onCanPlayThrough');
  Stream<Event> get onChange => throw UnimplementedError('onChange');
  Stream<MouseEvent> get onClick => throw UnimplementedError('onClick');
  Stream<MouseEvent> get onContextMenu => throw UnimplementedError('onContextMenu');
  Stream<Event> get onDoubleClick => throw UnimplementedError('onDoubleClick');
  Stream<MouseEvent> get onDrag => throw UnimplementedError('onDrag');
  Stream<MouseEvent> get onDragEnd => throw UnimplementedError('onDragEnd');
  Stream<MouseEvent> get onDragEnter => throw UnimplementedError('onDragEnter');
  Stream<MouseEvent> get onDragLeave => throw UnimplementedError('onDragLeave');
  Stream<MouseEvent> get onDragOver => throw UnimplementedError('onDragOver');
  Stream<MouseEvent> get onDragStart => throw UnimplementedError('onDragStart');
  Stream<MouseEvent> get onDrop => throw UnimplementedError('onDrop');
  Stream<Event> get onDurationChange => throw UnimplementedError('onDurationChange');
  Stream<Event> get onEmptied => throw UnimplementedError('onEmptied');
  Stream<Event> get onEnded => throw UnimplementedError('onEnded');
  Stream<Event> get onError => throw UnimplementedError('onError');
  Stream<Event> get onFocus => throw UnimplementedError('onFocus');
  Stream<Event> get onInput => throw UnimplementedError('onInput');
  Stream<Event> get onInvalid => throw UnimplementedError('onInvalid');
  Stream<dynamic> get onKeyDown => throw UnimplementedError('onKeyDown');
  Stream<dynamic> get onKeyPress => throw UnimplementedError('onKeyPress');
  Stream<dynamic> get onKeyUp => throw UnimplementedError('onKeyUp');
  Stream<Event> get onLoad => throw UnimplementedError('onLoad');
  Stream<Event> get onLoadedData => throw UnimplementedError('onLoadedData');
  Stream<Event> get onLoadedMetadata => throw UnimplementedError('onLoadedMetadata');
  Stream<MouseEvent> get onMouseDown => throw UnimplementedError('onMouseDown');
  Stream<MouseEvent> get onMouseEnter => throw UnimplementedError('onMouseEnter');
  Stream<MouseEvent> get onMouseLeave => throw UnimplementedError('onMouseLeave');
  Stream<MouseEvent> get onMouseMove => throw UnimplementedError('onMouseMove');
  Stream<MouseEvent> get onMouseOut => throw UnimplementedError('onMouseOut');
  Stream<MouseEvent> get onMouseOver => throw UnimplementedError('onMouseOver');
  Stream<MouseEvent> get onMouseUp => throw UnimplementedError('onMouseUp');
  Stream<dynamic> get onMouseWheel => throw UnimplementedError('onMouseWheel');
  Stream<Event> get onPause => throw UnimplementedError('onPause');
  Stream<Event> get onPlay => throw UnimplementedError('onPlay');
  Stream<Event> get onPlaying => throw UnimplementedError('onPlaying');
  Stream<Event> get onRateChange => throw UnimplementedError('onRateChange');
  Stream<Event> get onReset => throw UnimplementedError('onReset');
  Stream<Event> get onResize => throw UnimplementedError('onResize');
  Stream<Event> get onScroll => throw UnimplementedError('onScroll');
  Stream<Event> get onSeeked => throw UnimplementedError('onSeeked');
  Stream<Event> get onSeeking => throw UnimplementedError('onSeeking');
  Stream<Event> get onSelect => throw UnimplementedError('onSelect');
  Stream<Event> get onStalled => throw UnimplementedError('onStalled');
  Stream<Event> get onSubmit => throw UnimplementedError('onSubmit');
  Stream<Event> get onSuspend => throw UnimplementedError('onSuspend');
  Stream<Event> get onTimeUpdate => throw UnimplementedError('onTimeUpdate');
  Stream<dynamic> get onTouchCancel => throw UnimplementedError('onTouchCancel');
  Stream<dynamic> get onTouchEnd => throw UnimplementedError('onTouchEnd');
  Stream<dynamic> get onTouchMove => throw UnimplementedError('onTouchMove');
  Stream<dynamic> get onTouchStart => throw UnimplementedError('onTouchStart');
  Stream<Event> get onVolumeChange => throw UnimplementedError('onVolumeChange');
  Stream<Event> get onWaiting => throw UnimplementedError('onWaiting');
  Stream<dynamic> get onWheel => throw UnimplementedError('onWheel');
  String atob(String atob) => throw UnimplementedError('atob');
  String btoa(String btoa) => throw UnimplementedError('btoa');
  Stream<Event> get onHashChange => throw UnimplementedError('onHashChange');
  Stream<MessageEvent> get onMessage => throw UnimplementedError('onMessage');
  Stream<Event> get onOffline => throw UnimplementedError('onOffline');
  Stream<Event> get onOnline => throw UnimplementedError('onOnline');
  Stream<dynamic> get onPopState => throw UnimplementedError('onPopState');
  Stream<dynamic> get onStorage => throw UnimplementedError('onStorage');
  Stream<Event> get onUnload => throw UnimplementedError('onUnload');
  void close() => throw UnimplementedError('close');
  void postMessage(dynamic message, String targetOrigin, [List<Object>? transfer]) =>
      throw UnimplementedError('postMessage');
  dynamic get location => throw UnimplementedError('location');
  History get history => throw UnimplementedError('history');
  bool? get closed => throw UnimplementedError('closed');
  dynamic get opener => throw UnimplementedError('opener');
  dynamic get parent => throw UnimplementedError('parent');
  dynamic get top => throw UnimplementedError('top');
  dynamic open(String url, String name, [String? options]) => throw UnimplementedError('open');
  int requestAnimationFrame(void Function(num) callback) => throw UnimplementedError('requestAnimationFrame');
  void cancelAnimationFrame(int id) => throw UnimplementedError('cancelAnimationFrame');
  Future<dynamic> requestFileSystem(int size, {bool persistent = false}) =>
      throw UnimplementedError('requestFileSystem');
  void alert([String? message]) => throw UnimplementedError('alert');
  void cancelIdleCallback(int handle) => throw UnimplementedError('cancelIdleCallback');
  bool confirm([String? message]) => throw UnimplementedError('confirm');
  Future<dynamic> fetch(dynamic input, [Map<dynamic, dynamic>? init]) => throw UnimplementedError('fetch');
  bool find(String? string, bool? caseSensitive, bool? backwards, bool? wrap, bool? wholeWord, bool? searchInFrames,
          bool? showDialog) =>
      throw UnimplementedError('find');
  dynamic getComputedStyleMap(Element element, String? pseudoElement) =>
      throw UnimplementedError('getComputedStyleMap');
  List<dynamic> getMatchedCssRules(Element? element, String? pseudoElement) =>
      throw UnimplementedError('getMatchedCssRules');
  dynamic getSelection() => throw UnimplementedError('getSelection');
  dynamic matchMedia(String query) => throw UnimplementedError('matchMedia');
  void moveBy(int x, int y) => throw UnimplementedError('moveBy');
  void print() => throw UnimplementedError('print');
  int requestIdleCallback(void Function(dynamic) callback, [Map<dynamic, dynamic>? options]) =>
      throw UnimplementedError('requestIdleCallback');
  void resizeBy(int x, int y) => throw UnimplementedError('resizeBy');
  void resizeTo(int x, int y) => throw UnimplementedError('resizeTo');
  void scroll([dynamic options_OR_x, dynamic y, Map<dynamic, dynamic>? scrollOptions]) =>
      throw UnimplementedError('scroll');
  void scrollBy([dynamic options_OR_x, dynamic y, Map<dynamic, dynamic>? scrollOptions]) =>
      throw UnimplementedError('scrollBy');
  void scrollTo([dynamic options_OR_x, dynamic y, Map<dynamic, dynamic>? scrollOptions]) =>
      throw UnimplementedError('scrollTo');
  void stop() => throw UnimplementedError('stop');
  Future<dynamic> resolveLocalFileSystemUrl(String url) => throw UnimplementedError('resolveLocalFileSystemUrl');
  void moveTo(Point<num> p) => throw UnimplementedError('moveTo');
  static dynamic get contentLoadedEvent => throw UnimplementedError('contentLoadedEvent');
  static dynamic get deviceMotionEvent => throw UnimplementedError('deviceMotionEvent');
  static dynamic get deviceOrientationEvent => throw UnimplementedError('deviceOrientationEvent');
  static dynamic get hashChangeEvent => throw UnimplementedError('hashChangeEvent');
  static dynamic get loadStartEvent => throw UnimplementedError('loadStartEvent');
  static dynamic get messageEvent => throw UnimplementedError('messageEvent');
  static dynamic get offlineEvent => throw UnimplementedError('offlineEvent');
  static dynamic get onlineEvent => throw UnimplementedError('onlineEvent');
  static dynamic get pageHideEvent => throw UnimplementedError('pageHideEvent');
  static dynamic get pageShowEvent => throw UnimplementedError('pageShowEvent');
  static dynamic get popStateEvent => throw UnimplementedError('popStateEvent');
  static dynamic get progressEvent => throw UnimplementedError('progressEvent');
  static dynamic get storageEvent => throw UnimplementedError('storageEvent');
  static dynamic get unloadEvent => throw UnimplementedError('unloadEvent');
  static dynamic get animationEndEvent => throw UnimplementedError('animationEndEvent');
  static dynamic get animationIterationEvent => throw UnimplementedError('animationIterationEvent');
  static dynamic get animationStartEvent => throw UnimplementedError('animationStartEvent');
  static int get PERSISTENT => throw UnimplementedError('PERSISTENT');
  static int get TEMPORARY => throw UnimplementedError('TEMPORARY');
  static dynamic get beforeUnloadEvent => throw UnimplementedError('beforeUnloadEvent');
  Future<num> get animationFrame => throw UnimplementedError('animationFrame');
  dynamic get document => throw UnimplementedError('document');
  set location(dynamic _) => throw UnimplementedError('location=');
  dynamic get indexedDB => throw UnimplementedError('indexedDB');
  dynamic get console => throw UnimplementedError('console');
  static bool get supportsPointConversions => throw UnimplementedError('supportsPointConversions');
  dynamic get animationWorklet => throw UnimplementedError('animationWorklet');
  dynamic get applicationCache => throw UnimplementedError('applicationCache');
  dynamic get audioWorklet => throw UnimplementedError('audioWorklet');
  dynamic get caches => throw UnimplementedError('caches');
  dynamic get cookieStore => throw UnimplementedError('cookieStore');
  dynamic get crypto => throw UnimplementedError('crypto');
  dynamic get customElements => throw UnimplementedError('customElements');
  String? get defaultStatus => throw UnimplementedError('defaultStatus');
  set defaultStatus(String? _) => throw UnimplementedError('defaultStatus=');
  String? get defaultstatus => throw UnimplementedError('defaultstatus');
  set defaultstatus(String? _) => throw UnimplementedError('defaultstatus=');
  num get devicePixelRatio => throw UnimplementedError('devicePixelRatio');
  dynamic get external => throw UnimplementedError('external');
  int? get innerHeight => throw UnimplementedError('innerHeight');
  int? get innerWidth => throw UnimplementedError('innerWidth');
  bool? get isSecureContext => throw UnimplementedError('isSecureContext');
  Storage get localStorage => throw UnimplementedError('localStorage');
  dynamic get locationbar => throw UnimplementedError('locationbar');
  dynamic get menubar => throw UnimplementedError('menubar');
  String? get name => throw UnimplementedError('name');
  set name(String? _) => throw UnimplementedError('name=');
  dynamic get navigator => throw UnimplementedError('navigator');
  bool? get offscreenBuffering => throw UnimplementedError('offscreenBuffering');
  set opener(dynamic _) => throw UnimplementedError('opener=');
  int? get orientation => throw UnimplementedError('orientation');
  String? get origin => throw UnimplementedError('origin');
  int get outerHeight => throw UnimplementedError('outerHeight');
  int get outerWidth => throw UnimplementedError('outerWidth');
  dynamic get performance => throw UnimplementedError('performance');
  dynamic get screen => throw UnimplementedError('screen');
  int? get screenLeft => throw UnimplementedError('screenLeft');
  int? get screenTop => throw UnimplementedError('screenTop');
  int? get screenX => throw UnimplementedError('screenX');
  int? get screenY => throw UnimplementedError('screenY');
  dynamic get scrollbars => throw UnimplementedError('scrollbars');
  dynamic get self => throw UnimplementedError('self');
  Storage get sessionStorage => throw UnimplementedError('sessionStorage');
  dynamic get speechSynthesis => throw UnimplementedError('speechSynthesis');
  String? get status => throw UnimplementedError('status');
  set status(String? _) => throw UnimplementedError('status=');
  dynamic get statusbar => throw UnimplementedError('statusbar');
  dynamic get styleMedia => throw UnimplementedError('styleMedia');
  dynamic get toolbar => throw UnimplementedError('toolbar');
  dynamic get visualViewport => throw UnimplementedError('visualViewport');
  dynamic get window => throw UnimplementedError('window');
  Stream<Event> get onContentLoaded => throw UnimplementedError('onContentLoaded');
  Stream<dynamic> get onDeviceMotion => throw UnimplementedError('onDeviceMotion');
  Stream<dynamic> get onDeviceOrientation => throw UnimplementedError('onDeviceOrientation');
  Stream<Event> get onLoadStart => throw UnimplementedError('onLoadStart');
  Stream<Event> get onPageHide => throw UnimplementedError('onPageHide');
  Stream<Event> get onPageShow => throw UnimplementedError('onPageShow');
  Stream<Event> get onProgress => throw UnimplementedError('onProgress');
  Stream<Event> get onSearch => throw UnimplementedError('onSearch');
  Stream<dynamic> get onTransitionEnd => throw UnimplementedError('onTransitionEnd');
  Stream<dynamic> get onAnimationEnd => throw UnimplementedError('onAnimationEnd');
  Stream<dynamic> get onAnimationIteration => throw UnimplementedError('onAnimationIteration');
  Stream<dynamic> get onAnimationStart => throw UnimplementedError('onAnimationStart');
  Stream<Event> get onBeforeUnload => throw UnimplementedError('onBeforeUnload');
  int get pageXOffset => throw UnimplementedError('pageXOffset');
  int get pageYOffset => throw UnimplementedError('pageYOffset');
  int get scrollX => throw UnimplementedError('scrollX');
  int get scrollY => throw UnimplementedError('scrollY');
  factory Window._() => throw UnimplementedError('_');
}

Window get window => throw UnimplementedError('window');
